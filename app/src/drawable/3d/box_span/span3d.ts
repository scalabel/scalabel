import * as THREE from "three"

import { Box3D } from "../box3d"
import { SpanPoint3D } from "./spanPoint3d"

/**
 * ThreeJS class for rendering 3D span object
 */
export class Span3D {
  private point1: SpanPoint3D | null
  private point2: SpanPoint3D | null
  private point3: SpanPoint3D | null
  private point4: SpanPoint3D | null
  private pointTmp: SpanPoint3D | null
  private _complete: boolean

  constructor() {
    this.point1 = null
    this.point2 = null
    this.point3 = null
    this.point4 = null
    /**
     * TODO: set temporary point to current mouse position
     */
    this.pointTmp = new SpanPoint3D(0, 0)
    this._complete = false
  }

  public render(scene: THREE.Scene, camera: THREE.Camera): void {
    /**
     * TODO: use points data to render temporary geometries
     * TODO: figure out whether to render lines/planes/cuboids natively
     * TODO: with ThreeJS or encapsulate in a custom class
     */

    /**
     * TODO: always render temp point no matter which case
     */

    if (this.point2 === null) {
      /**
       * TODO: render first point
       * TODO: render line between first point and temp point
       */
    } else if (this.point3 === null) {
      /**
       * TODO: render first, second point
       * TODO: render plane formed by first, second point and temp point
       */
    } else if (this.point4 === null) {
      /**
       * TODO: render first, second, third point
       * TODO: render cuboid formed by first, second, third point and temp point
       */
    } else {
      // should not reach this case, throw an error
    }
  }

  /**
   * Handle mouse up
   *
   * @param x
   * @param y
   * @param camera
   */
  public onMouseUp(x: number, y: number, camera: THREE.Camera): void {
    /**
     * TODO: set next point as current mouse position
     * TODO: render new point that follows mouse along an axis
     * TODO: orthogonal to vectors generated by previous points
     */
  }

  /**
   * Handle mouse move
   *
   * @param x
   * @param y
   * @param camera
   */
  public onMouseMove(x: number, y: number, camera: THREE.Camera): void {
    /**
     * TODO: update temp point to current mouse position
     */
  }

  /** whether span box is complete */
  public get complete(): boolean {
    return this._complete
  }

  /** convert span box to Box3D */
  public spanToBox3D(): Box3D {
    /**
     * TODO: convert point data to box coordinates
     * TODO: add an appropriate Label3D class based on
     * TODO: currently selected category or default
     */
  }
}

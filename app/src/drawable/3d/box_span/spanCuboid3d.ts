import * as THREE from "three"

import { SpanPoint3D } from "./spanPoint3d"
import { SpanLine3D } from "./spanLine3d"
import { SpanRect3D } from "./spanRect3d"
import { Vector3D } from "../../../math/vector3d"

/**
 * ThreeJS class for rendering 3D cuboid
 */
export class SpanCuboid3D {
  private readonly _p1: SpanPoint3D
  private readonly _p2: SpanPoint3D
  private readonly _p3: SpanPoint3D
  private readonly _p4: SpanPoint3D

  /**
   * Constructor
   *
   * @param p1
   * @param p2
   * @param p3
   * @param p4
   */
  constructor(
    p1: SpanPoint3D,
    p2: SpanPoint3D,
    p3: SpanPoint3D,
    p4: SpanPoint3D
  ) {
    this._p1 = p1
    this._p2 = p2
    this._p3 = p3
    this._p4 = p4
  }

  /**
   * Add to scene for rendering
   *
   * @param scene
   */
  public render(scene: THREE.Scene): void {
    // TODO: generate cuboid formed by four points and add to scene
    const face1 = new SpanRect3D(this._p1, this._p2, this._p3)
    const face1Points = face1.points
    const newPoints = this.translateRect()
    const face2 = new SpanRect3D(newPoints[0], newPoints[1], newPoints[2])
    const face2Points = face2.points
    const newLines = this.connectingLines(face1Points, face2Points)

    face1.render(scene)
    face2.render(scene)
    for (const line of newLines) {
      line.render(scene)
    }
  }

  /** Translate plane generated by first three points */
  private translateRect(): SpanPoint3D[] {
    const v1 = new Vector3D(this._p1.x, this._p1.y, this._p1.z)
    const v2 = new Vector3D(this._p2.x, this._p2.y, this._p2.z)
    const v3 = new Vector3D(this._p3.x, this._p3.y, this._p3.z)
    const v4 = new Vector3D(this._p4.x, this._p4.y, this._p4.z)

    const v34 = v4.clone().subtract(v3)
    const newV1 = v1.clone().add(v34)
    const newV2 = v2.clone().add(v34)
    const newV3 = v3.clone().add(v34)

    const newP1 = new SpanPoint3D(0, 0, new THREE.Camera())
    newP1.setCoords(newV1.x, newV1.y, newV1.z)
    const newP2 = new SpanPoint3D(0, 0, new THREE.Camera())
    newP2.setCoords(newV2.x, newV2.y, newV2.z)
    const newP3 = new SpanPoint3D(0, 0, new THREE.Camera())
    newP3.setCoords(newV3.x, newV3.y, newV3.z)

    return [newP1, newP2, newP3]
  }

  /**
   * Calculate lines connecting both faces
   *
   * @param points1
   * @param points2
   */
  private connectingLines(
    points1: SpanPoint3D[],
    points2: SpanPoint3D[]
  ): SpanLine3D[] {
    const l11 = new SpanLine3D(points1[0], points2[0])
    const l22 = new SpanLine3D(points1[1], points2[1])
    const l33 = new SpanLine3D(points1[2], points2[2])
    const l44 = new SpanLine3D(points1[3], points2[3])

    return [l11, l22, l33, l44]
  }
}
